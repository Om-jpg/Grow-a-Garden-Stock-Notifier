import requests
from bs4 import BeautifulSoup
import time
from datetime import datetime
import logging

# 📝 Logging setup
logging.basicConfig(
    filename="garden_notifier.log",
    filemode="a",
    format="[{asctime}] {message}",
    style="{",
    level=logging.INFO
)

def log(msg):
    print(msg)
    logging.info(msg)

# 🌐 Grow a Garden stock tracker
STOCK_URL = "https://growagardenvalues.com/stock/stocks.php"

# 🔔 IFTTT Webhook URLs
SEED_WEBHOOK = "https://maker.ifttt.com/trigger/divine_seed/with/key/d-fwXYxGn_at_dAHN8A_KuBvikAagdCJn_roBV9HRQq"
EGG_WEBHOOK = "https://maker.ifttt.com/trigger/divine_egg/with/key/d-fwXYxGn_at_dAHN8A_KuBvikAagdCJn_roBV9HRQq"
HEARTBEAT_WEBHOOK = "https://maker.ifttt.com/trigger/script_heartbeat/with/key/d-fwXYxGn_at_dAHN8A_KuBvikAagdCJn_roBV9HRQq"
SPRINKLER_WEBHOOK = "https://maker.ifttt.com/trigger/master_sprinkler/with/key/d-fwXYxGn_at_dAHN8A_KuBvikAagdCJn_roBV9HRQq"

# 🌟 Divine/Prismatic seeds and eggs
RARE_SEEDS = [
    "Dragon Fruit",
    "Mango",
    "Grape",
    "Mushroom",
    "Pepper",
    "Cacao",
    "Beanstalk",
    "Ember Lily",
    "Sugar Apple"
]

RARE_EGGS = [
    "Bug Egg",
    "Legendary Egg",
    "Mythic Egg",
    "Bee Egg"
]

# 💧 Rare sprinkler items
RARE_SPRINKLERS = [
    "Master Sprinkler"
]

# 🧠 Notification memory
notified_seeds = set()
notified_eggs = set()
notified_sprinklers = set()
last_heartbeat = time.time()

def check_seeds():
    global notified_seeds, notified_eggs, notified_sprinklers
    try:
        res = requests.get(STOCK_URL, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        res.raise_for_status()
        soup = BeautifulSoup(res.text, 'html.parser')
        all_text = soup.get_text().lower()

        # Check seeds
        for seed in RARE_SEEDS:
            seed_lower = seed.lower()
            if seed_lower in all_text and seed_lower not in notified_seeds:
                log(f"[+] Rare seed found: {seed}")
                try:
                    requests.post(SEED_WEBHOOK, json={"value1": f"🌱 Rare seed in stock: {seed}"}, timeout=5)
                except requests.RequestException as e:
                    log(f"[!] Failed to notify seed: {e}")
                notified_seeds.add(seed_lower)

        # Check eggs
        for egg in RARE_EGGS:
            egg_lower = egg.lower()
            if egg_lower in all_text and egg_lower not in notified_eggs:
                log(f"[🥚] Rare egg found: {egg}")
                try:
                    requests.post(EGG_WEBHOOK, json={"value1": f"🥚 Rare egg in stock: {egg}"}, timeout=5)
                except requests.RequestException as e:
                    log(f"[!] Failed to notify egg: {e}")
                notified_eggs.add(egg_lower)

        # Check sprinklers
        for sprinkler in RARE_SPRINKLERS:
            sprinkler_lower = sprinkler.lower()
            if sprinkler_lower in all_text and sprinkler_lower not in notified_sprinklers:
                log(f"[🚿] Rare sprinkler found: {sprinkler}")
                try:
                    requests.post(SPRINKLER_WEBHOOK, json={"value1": f"🚿 Sprinkler in stock: {sprinkler}"}, timeout=5)
                except requests.RequestException as e:
                    log(f"[!] Failed to notify sprinkler: {e}")
                notified_sprinklers.add(sprinkler_lower)

    except Exception as e:
        log(f"[!] Error: {e}")

def send_heartbeat():
    log("[♥] Sending heartbeat notification...")
    try:
        requests.post(HEARTBEAT_WEBHOOK, json={"value1": f"✅ Script is still running at {datetime.now()}."}, timeout=5)
    except requests.RequestException as e:
        log(f"[!] Failed to send heartbeat: {e}")

# 🕐 Run loop
log("🌿 Grow a Garden Divine Seed
Notifier started...")

last_reset = time.time()
last_egg_reset = time.time()
last_sprinkler_reset = time.time()

try:
    while True:
        check_seeds()

        now = time.time()

        # Reset seed alerts every 5 min
        if now - last_reset >= 300:
            log("[🔁] 5 minutes passed — resetting notified seeds.")
            notified_seeds.clear()
            last_reset = now

        # Reset egg alerts every 30 min
        if now - last_egg_reset >= 1800:
            log("[🔁] 30 minutes passed — resetting notified eggs.")
            notified_eggs.clear()
            last_egg_reset = now

        # Reset sprinkler alerts every 5 min
        if now - last_sprinkler_reset >= 300:
            log("[🔁] 5 minutes passed — resetting notified sprinklers.")
            notified_sprinklers.clear()
            last_sprinkler_reset = now

        # Send heartbeat every hour
        if now - last_heartbeat >= 3600:
            send_heartbeat()
            last_heartbeat = now

        time.sleep(60)

except KeyboardInterrupt:
    log("[✋] Script terminated manually.")

